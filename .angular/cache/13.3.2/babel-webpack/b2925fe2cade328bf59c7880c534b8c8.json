{"ast":null,"code":"import { ɵɵdefineInjectable, ɵsetClassMetadata, Injectable, ɵɵdirectiveInject, ElementRef, ɵɵdefineComponent, ɵɵprojectionDef, ɵɵprojection, Component, Input, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule } from '@angular/core';\nimport lightGallery from 'lightgallery';\nlet LightgalleryService = /*#__PURE__*/(() => {\n  class LightgalleryService {\n    constructor() {}\n\n  }\n\n  LightgalleryService.ɵfac = function LightgalleryService_Factory(t) {\n    return new (t || LightgalleryService)();\n  };\n\n  LightgalleryService.ɵprov = ɵɵdefineInjectable({\n    token: LightgalleryService,\n    factory: LightgalleryService.ɵfac,\n    providedIn: 'root'\n  });\n  return LightgalleryService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst _c0 = [\"*\"];\nconst LgMethods = {\n  onAfterAppendSlide: 'lgAfterAppendSlide',\n  onInit: 'lgInit',\n  onHasVideo: 'lgHasVideo',\n  onContainerResize: 'lgContainerResize',\n  onUpdateSlides: 'lgUpdateSlides',\n  onAfterAppendSubHtml: 'lgAfterAppendSubHtml',\n  onBeforeOpen: 'lgBeforeOpen',\n  onAfterOpen: 'lgAfterOpen',\n  onSlideItemLoad: 'lgSlideItemLoad',\n  onBeforeSlide: 'lgBeforeSlide',\n  onAfterSlide: 'lgAfterSlide',\n  onPosterClick: 'lgPosterClick',\n  onDragStart: 'lgDragStart',\n  onDragMove: 'lgDragMove',\n  onDragEnd: 'lgDragEnd',\n  onBeforeNextSlide: 'lgBeforeNextSlide',\n  onBeforePrevSlide: 'lgBeforePrevSlide',\n  onBeforeClose: 'lgBeforeClose',\n  onAfterClose: 'lgAfterClose',\n  onRotateLeft: 'lgRotateLeft',\n  onRotateRight: 'lgRotateRight',\n  onFlipHorizontal: 'lgFlipHorizontal',\n  onFlipVertical: 'lgFlipVertical'\n};\nlet LightgalleryComponent = /*#__PURE__*/(() => {\n  class LightgalleryComponent {\n    constructor(_elementRef) {\n      this._elementRef = _elementRef;\n      this.lgInitialized = false;\n      this._elementRef = _elementRef;\n    }\n\n    ngAfterViewChecked() {\n      if (!this.lgInitialized) {\n        this.registerEvents();\n        this.LG = lightGallery(this._elementRef.nativeElement, this.settings);\n        this.lgInitialized = true;\n      }\n    }\n\n    ngOnDestroy() {\n      this.LG.destroy();\n      this.lgInitialized = false;\n    }\n\n    registerEvents() {\n      if (this.onAfterAppendSlide) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onAfterAppendSlide, event => {\n          this.onAfterAppendSlide && this.onAfterAppendSlide(event.detail);\n        });\n      }\n\n      if (this.onInit) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onInit, event => {\n          this.onInit && this.onInit(event.detail);\n        });\n      }\n\n      if (this.onHasVideo) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onHasVideo, event => {\n          this.onHasVideo && this.onHasVideo(event.detail);\n        });\n      }\n\n      if (this.onContainerResize) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onContainerResize, event => {\n          this.onContainerResize && this.onContainerResize(event.detail);\n        });\n      }\n\n      if (this.onAfterAppendSubHtml) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onAfterAppendSubHtml, event => {\n          this.onAfterAppendSubHtml && this.onAfterAppendSubHtml(event.detail);\n        });\n      }\n\n      if (this.onBeforeOpen) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onBeforeOpen, event => {\n          this.onBeforeOpen && this.onBeforeOpen(event.detail);\n        });\n      }\n\n      if (this.onAfterOpen) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onAfterOpen, event => {\n          this.onAfterOpen && this.onAfterOpen(event.detail);\n        });\n      }\n\n      if (this.onSlideItemLoad) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onSlideItemLoad, event => {\n          this.onSlideItemLoad && this.onSlideItemLoad(event.detail);\n        });\n      }\n\n      if (this.onBeforeSlide) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onBeforeSlide, event => {\n          this.onBeforeSlide && this.onBeforeSlide(event.detail);\n        });\n      }\n\n      if (this.onAfterSlide) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onAfterSlide, event => {\n          this.onAfterSlide && this.onAfterSlide(event.detail);\n        });\n      }\n\n      if (this.onPosterClick) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onPosterClick, event => {\n          this.onPosterClick && this.onPosterClick(event.detail);\n        });\n      }\n\n      if (this.onDragStart) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onDragStart, event => {\n          this.onDragStart && this.onDragStart(event.detail);\n        });\n      }\n\n      if (this.onDragMove) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onDragMove, event => {\n          this.onDragMove && this.onDragMove(event.detail);\n        });\n      }\n\n      if (this.onDragEnd) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onDragEnd, event => {\n          this.onDragEnd && this.onDragEnd(event.detail);\n        });\n      }\n\n      if (this.onBeforeNextSlide) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onBeforeNextSlide, event => {\n          this.onBeforeNextSlide && this.onBeforeNextSlide(event.detail);\n        });\n      }\n\n      if (this.onBeforePrevSlide) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onBeforePrevSlide, event => {\n          this.onBeforePrevSlide && this.onBeforePrevSlide(event.detail);\n        });\n      }\n\n      if (this.onBeforeClose) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onBeforeClose, event => {\n          this.onBeforeClose && this.onBeforeClose(event.detail);\n        });\n      }\n\n      if (this.onAfterClose) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onAfterClose, event => {\n          this.onAfterClose && this.onAfterClose(event.detail);\n        });\n      }\n\n      if (this.onRotateLeft) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onRotateLeft, event => {\n          this.onRotateLeft && this.onRotateLeft(event.detail);\n        });\n      }\n\n      if (this.onRotateRight) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onRotateRight, event => {\n          this.onRotateRight && this.onRotateRight(event.detail);\n        });\n      }\n\n      if (this.onFlipHorizontal) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onFlipHorizontal, event => {\n          this.onFlipHorizontal && this.onFlipHorizontal(event.detail);\n        });\n      }\n\n      if (this.onFlipVertical) {\n        this._elementRef.nativeElement.addEventListener(LgMethods.onFlipVertical, event => {\n          this.onFlipVertical && this.onFlipVertical(event.detail);\n        });\n      }\n    }\n\n  }\n\n  LightgalleryComponent.ɵfac = function LightgalleryComponent_Factory(t) {\n    return new (t || LightgalleryComponent)(ɵɵdirectiveInject(ElementRef));\n  };\n\n  LightgalleryComponent.ɵcmp = ɵɵdefineComponent({\n    type: LightgalleryComponent,\n    selectors: [[\"lightgallery\"]],\n    inputs: {\n      settings: \"settings\",\n      onAfterAppendSlide: \"onAfterAppendSlide\",\n      onInit: \"onInit\",\n      onHasVideo: \"onHasVideo\",\n      onContainerResize: \"onContainerResize\",\n      onAfterAppendSubHtml: \"onAfterAppendSubHtml\",\n      onBeforeOpen: \"onBeforeOpen\",\n      onAfterOpen: \"onAfterOpen\",\n      onSlideItemLoad: \"onSlideItemLoad\",\n      onBeforeSlide: \"onBeforeSlide\",\n      onAfterSlide: \"onAfterSlide\",\n      onPosterClick: \"onPosterClick\",\n      onDragStart: \"onDragStart\",\n      onDragMove: \"onDragMove\",\n      onDragEnd: \"onDragEnd\",\n      onBeforeNextSlide: \"onBeforeNextSlide\",\n      onBeforePrevSlide: \"onBeforePrevSlide\",\n      onBeforeClose: \"onBeforeClose\",\n      onAfterClose: \"onAfterClose\",\n      onRotateLeft: \"onRotateLeft\",\n      onRotateRight: \"onRotateRight\",\n      onFlipHorizontal: \"onFlipHorizontal\",\n      onFlipVertical: \"onFlipVertical\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function LightgalleryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵɵprojectionDef();\n        ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return LightgalleryComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LightgalleryModule = /*#__PURE__*/(() => {\n  class LightgalleryModule {}\n\n  LightgalleryModule.ɵfac = function LightgalleryModule_Factory(t) {\n    return new (t || LightgalleryModule)();\n  };\n\n  LightgalleryModule.ɵmod = ɵɵdefineNgModule({\n    type: LightgalleryModule\n  });\n  LightgalleryModule.ɵinj = ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return LightgalleryModule;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵɵsetNgModuleScope(LightgalleryModule, {\n    declarations: [LightgalleryComponent],\n    exports: [LightgalleryComponent]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of lightgallery-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LightgalleryComponent, LightgalleryModule, LightgalleryService }; //# sourceMappingURL=lightgallery-angular-11.js.map","map":null,"metadata":{},"sourceType":"module"}